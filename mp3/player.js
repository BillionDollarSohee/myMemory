// Ïó∞ÎèÑ ÌëúÍ∏∞
document.getElementById('year').textContent = new Date().getFullYear();

// navbar.html Î∂àÎü¨Ïò§Í∏∞
fetch("navBar.html")
  .then(res => res.text())
  .then(data => {
    document.getElementById("navbar-placeholder").innerHTML = data;
  });

// Í≥° Î™©Î°ù
const songs = [
  { title: "31km", src: "music/31km.mp3" },
  { title: "109", src: "music/109.mp3" },
  { title: "airplay", src: "music/airplay.mp3" },
  { title: "Always", src: "music/Always.mp3" },
  // ... (Í∏∞Ï°¥ Î¶¨Ïä§Ìä∏ Í∑∏ÎåÄÎ°ú)
];

// Ïò§ÎîîÏò§ Í¥ÄÎ†® Î≥ÄÏàò
let currentIndex = 0;
let isPlaying = false;

const audio = document.getElementById("audio");
const nowPlaying = document.getElementById("nowPlaying");
const playPauseBtn = document.getElementById("playPauseBtn");
const prevBtn = document.getElementById("prevBtn");
const nextBtn = document.getElementById("nextBtn");
const playIcon = document.getElementById("playIcon");
const volumeControl = document.getElementById("volumeControl");

// AudioContext + ÎπÑÏ£ºÏñºÎùºÏù¥Ï†Ä
const canvas = document.getElementById("visualizer");
const ctx = canvas.getContext("2d");
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
const analyser = audioCtx.createAnalyser();
const source = audioCtx.createMediaElementSource(audio);
source.connect(analyser);
analyser.connect(audioCtx.destination);

analyser.fftSize = 256;
const bufferLength = analyser.frequencyBinCount;
const dataArray = new Uint8Array(bufferLength);

// ÏïÑÏù¥ÏΩò ÌÜ†Í∏Ä
function setPlayIcon(playing) {
  if (playing) {
    playIcon.innerHTML = `<path d="M6 5h4v14H6zM14 5h4v14h-4z"></path>`; // ‚è∏
  } else {
    playIcon.innerHTML = `<path d="M8 5v14l11-7z"></path>`; // ‚ñ∂
  }
}

// Í≥° Î°úÎìú
function loadSong(index) {
  audio.src = songs[index].src;
  nowPlaying.textContent = "ÏßÄÍ∏à Ïû¨ÏÉù Ï§ë: " + songs[index].title;
}

// ‚ñ∂ / ‚è∏ Î≤ÑÌäº
playPauseBtn.addEventListener("click", async () => {
  try {
    await audioCtx.resume();
    if (audio.paused) {
      await audio.play();
      isPlaying = true;
    } else {
      audio.pause();
      isPlaying = false;
    }
    setPlayIcon(isPlaying);
  } catch (err) {
    console.error("Ïû¨ÏÉù Ïã§Ìå®:", err);
  }
});

// ‚èÆ Ïù¥Ï†ÑÍ≥°
prevBtn.addEventListener("click", () => {
  currentIndex = (currentIndex - 1 + songs.length) % songs.length;
  loadSong(currentIndex);
  audio.play();
  isPlaying = true;
  setPlayIcon(isPlaying);
});

// ‚è≠ Îã§ÏùåÍ≥°
nextBtn.addEventListener("click", () => {
  currentIndex = (currentIndex + 1) % songs.length;
  loadSong(currentIndex);
  audio.play();
  isPlaying = true;
  setPlayIcon(isPlaying);
});

// Í≥°Ïù¥ ÎÅùÎÇ¨ÏùÑ Îïå ÏûêÎèô Îã§ÏùåÍ≥°
audio.addEventListener("ended", () => {
  nextBtn.click();
});

// üîä Î≥ºÎ•® Ïª®Ìä∏Î°§
volumeControl.addEventListener("input", (e) => {
  audio.volume = e.target.value;
});

// ÎπÑÏ£ºÏñºÎùºÏù¥Ï†Ä
function draw() {
  const bgImage = new Image();
  bgImage.src = "image/unsplash.jpg";

  requestAnimationFrame(draw);
  analyser.getByteFrequencyData(dataArray);

  if (bgImage.complete) {
    ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);
  } else {
    ctx.fillStyle = "#111";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  }

  const barWidth = (canvas.width / bufferLength) * 2.5;
  let x = 0;

  for (let i = 0; i < bufferLength; i++) {
    const barHeight = dataArray[i];
    ctx.fillStyle = `rgba(${barHeight + 100},50,150,0.7)`;
    ctx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);
    x += barWidth + 1;
  }
}
draw();

// Ï≤´ Í≥° Î°úÎìú
loadSong(currentIndex);
